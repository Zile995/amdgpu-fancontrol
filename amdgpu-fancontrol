#!/usr/bin/env bash

HYSTERESIS=5000   # in mK
SLEEP_INTERVAL=1  # in s
DEBUG=false

# set temps (in degrees C * 1000) and corresponding pwm values in ascending order and with the same amount of values
TEMPS=( 65000 80000 90000 )
PWMS=(      0   153   255 )

# hwmon paths, hardcoded for one amdgpu card, adjust as needed
FILE_PWM=$(echo /sys/class/drm/card?/device/hwmon/hwmon?/pwm1)
FILE_FANMODE=$(echo /sys/class/drm/card?/device/hwmon/hwmon?/pwm1_enable)
FILE_TEMP=$(echo /sys/class/drm/card?/device/hwmon/hwmon?/temp1_input)

check() {
  # checking for privileges
  (( ! $EUID )) || {
    echo "Writing to sysfs requires privileges, relaunch as root"
    exit 1
  }

  # load configuration file if present
  [[ -f /etc/${0##*/}.cfg ]] && . "/etc/${0##*/}.cfg"

  [[ -f "$FILE_PWM" && -f "$FILE_FANMODE" && -f "$FILE_TEMP" ]] || { echo "Invalid hwmon files" ; exit 1; }

  # check if amount of temps and pwm values match
  [[ ${#TEMPS[@]} -eq ${#PWMS[@]} ]] || {
    echo "Amount of temperature and pwm values does not match"
    exit 1
  }
}

debug() {
  (( ! $DEBUG )) || echo $1
}

# set fan mode to max(0), manual(1) or auto(2)
set_fanmode() {
  echo "Setting fan mode to $1"
  local current_value="$(<$FILE_FANMODE)"
  (( $current_value == $1 )) || echo "$1" > "$FILE_FANMODE"
}

set_pwm() {
  NEW_PWM=$1
  OLD_PWM="$(<$FILE_PWM)"

  debug "Current pwm: $OLD_PWM, requested to set pwm to $NEW_PWM"
  if [[ $(cat ${FILE_FANMODE}) -ne 1 ]]; then
    echo "Fanmode not set to manual"
    set_fanmode 1
  fi

  if [ -z "$TEMP_AT_LAST_PWM_CHANGE" ] || [ "$TEMP" -gt "$TEMP_AT_LAST_PWM_CHANGE" ] || [ $(($(cat "$FILE_TEMP") + HYSTERESIS)) -le "$TEMP_AT_LAST_PWM_CHANGE" ]; then
    $DEBUG || echo "Current temp: $TEMP"
    echo "Temp at last change was $TEMP_AT_LAST_PWM_CHANGE"
    echo "Changing pwm to $NEW_PWM"
    echo "$NEW_PWM" > "$FILE_PWM"
    TEMP_AT_LAST_PWM_CHANGE="$(<$FILE_TEMP)"
  else
    debug "Not changing pwm, we just did at $TEMP_AT_LAST_PWM_CHANGE, next change when below $((TEMP_AT_LAST_PWM_CHANGE - HYSTERESIS))"
  fi
}

interpolate_pwm() {
  i=0
  TEMP="$(<$FILE_TEMP)"

  debug "Current temp: $TEMP"

  if [[ $TEMP -le ${TEMPS[0]} ]]; then
    # below first point in list, set to min speed
    set_pwm "${PWMS[i]}"
    return
  elif [[ $TEMP -gt ${TEMPS[-1]} ]]; then
    # above last point in list, set to max speed
    set_pwm "${PWMS[-1]}"
    return
  fi

  for i in "${!TEMPS[@]}"; do
    if [[ $TEMP -gt ${TEMPS[$i]} ]]; then
      continue
    fi

    # interpolate linearly
    LOWERTEMP=${TEMPS[i-1]}
    HIGHERTEMP=${TEMPS[i]}
    LOWERPWM=${PWMS[i-1]}
    HIGHERPWM=${PWMS[i]}
    PWM=$(echo "( ( $TEMP - $LOWERTEMP ) * ( $HIGHERPWM - $LOWERPWM ) / ( $HIGHERTEMP - $LOWERTEMP ) ) + $LOWERPWM" | bc)
    debug "Interpolated pwm value for temperature $TEMP is: $PWM"
    set_pwm "$PWM"
    return
  done
}

reset_on_exit() {
  echo "Exiting, setting the fallback fan mode..."
  set_fanmode "${FALLBACK_FANMODE:-2}"
  exit 0
}

# always try to reset fans on exit
trap "reset_on_exit" SIGINT SIGTERM

run_daemon() {
  # set fan control to manual
  set_fanmode 1

  # start the loop
  while :; do
    interpolate_pwm
    debug
    sleep $SLEEP_INTERVAL
  done
}

# check for privileges
# check the config files
check

# run the daemon
run_daemon
